const { Telegraf, Markup } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ WebApp
const generateReferralLink = (telegramId, totalCoins) =>
  `https://referal-testrer.netlify.app/?start=${telegramId}&totalCoins=${totalCoins}`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞
const generateBotLink = (telegramId) =>
  `https://t.me/${process.env.BOT_USERNAME}?start=${telegramId}`;

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
const updateUserBalance = async (telegramId, amount) => {
  try {
    const { data: user, error: fetchError } = await supabase
      .from('users')
      .select('totalCoins, referrer_id')
      .eq('telegram_id', telegramId)
      .single();

    if (fetchError) throw new Error(`Error fetching user: ${fetchError.message}`);

    const newBalance = (user.totalCoins || 0) + amount;
    const { error: updateError } = await supabase
      .from('users')
      .update({ totalCoins: newBalance })
      .eq('telegram_id', telegramId);

    if (updateError) throw new Error(`Error updating balance: ${updateError.message}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    if (user.referrer_id) {
      await checkReferralBonus(user.referrer_id);
    }
  } catch (error) {
    console.error('Error updating user balance:', error.message);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
const checkReferralBonus = async (referrerId) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const { data: referrals, error: fetchError } = await supabase
      .from('users')
      .select('telegram_id, totalCoins')
      .eq('referrer_id', referrerId);

    if (fetchError) throw new Error(`Error fetching referrals: ${fetchError.message}`);

    // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–∞–Ω—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    for (const referral of referrals) {
      if (referral.totalCoins >= 50000) {
        await updateUserBalance(referrerId, 10000); // –ù–∞—á–∏—Å–ª—è–µ–º 10000 totalCoins –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Å 50000 totalCoins
      } else if (referral.totalCoins >= 25000) {
        await updateUserBalance(referrerId, 5000); // –ù–∞—á–∏—Å–ª—è–µ–º 1000 totalCoins –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Å 10000 totalCoins
      }
    }
  } catch (error) {
    console.error('Error checking referral bonus:', error.message);
  }
};


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserBalance = async (telegramId) => {
  try {
    const { data: user, error } = await supabase
      .from('users')
      .select('totalCoins')
      .eq('telegram_id', telegramId)
      .single();

    if (error) throw new Error(`Error fetching user balance: ${error.message}`);
    return user.totalCoins || 0;
  } catch (error) {
    console.error('Error fetching user balance:', error.message);
    return 0;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—Å—ã–ª–∫–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const notifyReferrer = async (referrerId, newUserId) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const { data: referrer, error: fetchError } = await supabase
      .from('users')
      .select('chat_id')
      .eq('telegram_id', referrerId)
      .single();

    if (fetchError) throw new Error(`Error fetching referrer: ${fetchError.message}`);
    if (!referrer || !referrer.chat_id) return;

    // –ü–æ–ª—É—á–∞–µ–º username –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: newUser, error: newUserFetchError } = await supabase
      .from('users')
      .select('username')
      .eq('telegram_id', newUserId)
      .single();

    if (newUserFetchError) throw new Error(`Error fetching new user: ${newUserFetchError.message}`);

    const newUsername = newUser?.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    await bot.telegram.sendMessage(
      referrer.chat_id,
      `–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${newUsername}`
    );
  } catch (error) {
    console.error('Error notifying referrer:', error.message);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  const text = ctx.message.text;
  const parts = text.split(' ');
  const referrerId = parts[1] || null;
  const telegramId = ctx.from.id.toString();

  try {
    const { data: users, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', telegramId)
      .limit(1);

    if (userError) throw new Error(`Error fetching user: ${userError.message}`);

    if (users.length === 0) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await supabase.from('users').insert([
        {
          telegram_id: telegramId,
          referrer_id: referrerId,
          username: ctx.from.username || '', // –°–æ—Ö—Ä–∞–Ω—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          totalCoins: 0, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          chat_id: ctx.chat.id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          captcha_passed: false, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ø—á–∏
        },
      ]);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∫–∞–ø—á–∏
      const keyboard = Markup.inlineKeyboard([
        Markup.button.callback('–Ø –Ω–µ —Ä–æ–±–æ—Ç', 'CAPTCHA_PASSED'),
      ]);

      ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', keyboard);
    } else {
      ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
    }
  } catch (error) {
    console.error('Error handling /start command:', error.message);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞–ø—á–∏
bot.action('CAPTCHA_PASSED', async (ctx) => {
  const telegramId = ctx.from.id.toString();
  const username = ctx.from.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫–∞–ø—á—É
    const { data: user, error: fetchError } = await supabase
      .from('users')
      .select('captcha_passed, referrer_id')
      .eq('telegram_id', telegramId)
      .single();

    if (fetchError) throw new Error(`Error fetching user: ${fetchError.message}`);
    if (!user) throw new Error('User not found');

    if (user.captcha_passed) {
      ctx.reply('–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É.');
      return;
    }

    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É
    await supabase
      .from('users')
      .update({ captcha_passed: true })
      .eq('telegram_id', telegramId);

    // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏
    await updateUserBalance(telegramId, 5000);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userBalance = await getUserBalance(telegramId);

    // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (user.referrer_id) {
      await updateUserBalance(user.referrer_id, 5000);
      await notifyReferrer(user.referrer_id, telegramId);
    }

    const referralLink = generateReferralLink(telegramId, userBalance); // –ü–µ—Ä–µ–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞ –≤ —Å—Å—ã–ª–∫–µ
    const botLink = generateBotLink(telegramId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏
    const keyboard = Markup.inlineKeyboard([
      Markup.button.webApp('üëãStart Now!', referralLink),
      Markup.button.url('üî•Ref Link!', botLink),
    ]);

    ctx.reply(
      `Hello, @${username}! Welcome to COOKCOIN!
Click on - Start Now! And start earning coins\n\n` +
      `COOKCOIN - plans to list at the end of the whole story, I also advise you to look at the roadmap\n\n` +
      `Have friends, relatives, colleagues?\n` +
      `Bring them all into the game and unlock daily bonuses and the wheel of fortune\n` +
      `More friends, more coins.`,
      keyboard
    );
  } catch (error) {
    console.error('Error handling CAPTCHA action:', error.message);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ø—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
bot.on('message', async (ctx) => {
  if (ctx.message.text.startsWith('/start')) {
    const text = ctx.message.text;
    const parts = text.split(' ');
    const referrerId = parts[1] || null;
    const telegramId = ctx.from.id.toString();

    try {
      if (referrerId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
        const { data: referrer, error: fetchError } = await supabase
          .from('users')
          .select('telegram_id')
          .eq('telegram_id', referrerId)
          .single();

        if (fetchError) throw new Error(`Error fetching referrer: ${fetchError.message}`);
        if (!referrer) throw new Error('Referrer not found');

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        await notifyReferrer(referrerId, telegramId);
      }
    } catch (error) {
      console.error('Error handling referral link:', error.message);
    }
  }
});

bot.launch();
console.log('Bot is running...');
